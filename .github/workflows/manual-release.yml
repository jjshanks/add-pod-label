name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., v1.2.3, v1.2.3-beta.1, v1.2.3+meta.4)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Check version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Check if version starts with 'v'
          if [[ ! "$VERSION" =~ ^v ]]; then
            echo "Error: Version must start with 'v'"
            echo "Examples of valid versions:"
            echo "  - v1.2.3 (release)"
            echo "  - v1.2.3-alpha (pre-release)"
            echo "  - v1.2.3-alpha.1 (pre-release with number)"
            echo "  - v1.2.3-beta.2+meta.4 (pre-release with build metadata)"
            echo "  - v1.2.3+meta (release with build metadata)"
            exit 1
          fi
          
          # Remove 'v' prefix for semver validation
          VERSION_WITHOUT_V="${VERSION#v}"
          
          # Semver regex that supports pre-release and build metadata
          SEMVER_REGEX="^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$"
          if ! echo "$VERSION_WITHOUT_V" | grep -E "$SEMVER_REGEX"; then
            echo "Error: Version must be a valid semantic version"
            echo "Examples of valid versions:"
            echo "  - v1.2.3 (release)"
            echo "  - v1.2.3-alpha (pre-release)"
            echo "  - v1.2.3-alpha.1 (pre-release with number)"
            echo "  - v1.2.3-beta.2+meta.4 (pre-release with build metadata)"
            echo "  - v1.2.3+meta (release with build metadata)"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        run: |
          TAG="${{ github.event.inputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists!"
            exit 1
          fi
          git tag $TAG
          git push origin $TAG
          sleep 10  # Give GitHub a moment to process the tag

      - name: Trigger and monitor release workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = `${{ github.event.inputs.version }}`;
            
            async function waitForWorkflow() {
              for (let i = 0; i < 30; i++) {  // Wait up to 5 minutes
                console.log('Checking for release workflow run...');
                
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'release.yml',  // Your release workflow filename
                  branch: tag
                });
                
                if (runs.data.workflow_runs.length > 0) {
                  const run = runs.data.workflow_runs[0];
                  if (run.status === 'completed') {
                    if (run.conclusion === 'success') {
                      console.log('Release workflow completed successfully!');
                      return true;
                    } else {
                      throw new Error(`Release workflow failed with conclusion: ${run.conclusion}`);
                    }
                  }
                  console.log(`Release workflow status: ${run.status}`);
                } else {
                  console.log('Release workflow not found yet...');
                }
                
                await new Promise(resolve => setTimeout(resolve, 10000));  // Wait 10 seconds
              }
              throw new Error('Timeout waiting for release workflow');
            }
            
            try {
              await waitForWorkflow();
            } catch (error) {
              core.setFailed(`Error: ${error.message}`);
            }